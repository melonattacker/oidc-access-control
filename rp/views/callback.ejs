<!DOCTYPE html>
<head>
  <title>Submitting Callback</title>
</head>
<body>
  <p id="content">Submitting Callback...</p>
  <div>
    <p>With FIDO</p>
    <button id="registerButton">Register</button>
    <button id="loginButton">Login</button>
    <button id="afterLoginRequestButton">After Login Request</button>
  </div>
  <div>
    <p>Without FIDO</p>
    <button id="normalRegisterButton">Register</button>
    <button id="normalLoginButton">Login</button>
    <button id="normalAfterLoginRequestButton">After Login Request</button>
  </div>

  <script>
    // memory storage
    let randBytes = null;

    /**
     * Sends a POST request with payload. Throws when the response is not 200.
     * @param path The endpoint path.
     * @param payload The payload JSON object.
     * @returns 
     */
    async function _fetch(path, payload = '') {
      const headers = {
        'X-Requested-With': 'XMLHttpRequest',
      };
      if (payload && !(payload instanceof FormData)) {
        headers['Content-Type'] = 'application/json';
        payload = JSON.stringify(payload);
      }
      const res = await fetch(path, {
        method: 'POST',
        credentials: 'same-origin',
        headers: headers,
        body: payload,
      });
      if (res.status === 200) {
        // Server authentication succeeded
        return res.json();
      } else {
        // Server authentication failed
        const result = await res.json();
        throw new Error(result.error);
      }
    };

    /**
     * Encode given buffer or decode given string with Base64URL.
     */
    const base64url = {
      encode: function(buffer) {
        const base64 = window.btoa(String.fromCharCode(...new Uint8Array(buffer)));
        return base64.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
      },
      decode: function(base64url) {
        const base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');
        console.log(base64);
        const binStr = window.atob(base64);
        const bin = new Uint8Array(binStr.length);
        for (let i = 0; i < binStr.length; i++) {
          bin[i] = binStr.charCodeAt(i);
        }
        return bin.buffer;
      }
    };

    // generate random bytes
    function generateRandomBytes(length) {
      var array = new Uint8Array(length);
      window.crypto.getRandomValues(array);
      return arrayToHex(array);
    }

    function arrayToHex(array) {
      return Array.from(array).map(b => b.toString(16).padStart(2, '0')).join('');
    }

    // generate hash
    async function digestMessage(message) {
      const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array
      const hashBuffer = await crypto.subtle.digest("SHA-256", msgUint8); // hash the message
      const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array
      const hashHex = arrayToHex(hashArray); // convert bytes to hex string
      return hashHex;
    }

    function getIdToken() {
      const hash = window.location.hash.substr(1); 
      const params = new URLSearchParams(hash);
      const idToken = params.get('id_token');
      return idToken;
    }

    async function registerCredential(idToken) {
      console.log("idToken:", idToken);
      const callbackRes = await _fetch('/callback', {
        idToken: idToken
      });

      const options = await _fetch('/auth/registerRequest', {
        verificationToken: callbackRes.verificationToken
      });
      console.log("options:", options);

      // Base64URL decode some values
      options.user.id = base64url.decode(options.user.id);
      options.challenge = base64url.decode(options.challenge);
      if (options.excludeCredentials) {
        for (let cred of options.excludeCredentials) {
          cred.id = base64url.decode(cred.id);
        }
      }
      console.log("options:", options);

      // Use platform authenticator and discoverable credential
      options.authenticatorSelection = {
        // プラットフォーム間で同期されるパスキーのみを登録
        authenticatorAttachment: 'platform',
        requireResidentKey: true
      }
      const cred = await navigator.credentials.create({ publicKey: options });
      console.log("cred:", cred);

      const credential = {};
      credential.id = cred.id;
      // Base64URL encode `rawId`
      credential.rawId = base64url.encode(cred.rawId);
      credential.type = cred.type;

      // `authenticatorAttachment` in PublicKeyCredential is a new addition in WebAuthn L3
      if (cred.authenticatorAttachment) {
        credential.authenticatorAttachment = cred.authenticatorAttachment;
      }

      // Base64URL encode some values
      const clientDataJSON = base64url.encode(cred.response.clientDataJSON);
      const attestationObject = base64url.encode(cred.response.attestationObject);

      // Obtain transports if they are available.
      const transports = cred.response.getTransports ? cred.response.getTransports() : [];

      credential.response = {
        clientDataJSON,
        attestationObject,
        transports
      };

      // Send the result to the server and return the promise.
      return await _fetch('/auth/registerResponse', credential);
    }

    async function authenticate(conditional = false, idToken) {
      // Fetch passkey request options from the server.
      const options = await _fetch('/auth/signinRequest', {
        idToken: idToken
      });
      console.log("options:", options);

      // Base64URL decode the challenge
      options.challenge = base64url.decode(options.challenge);

      // `allowCredentials` empty array invokes an account selector by discoverable credentials.
      options.allowCredentials = [];

      console.log("navigator get:");
      // Invoke WebAuthn get
      const cred = await navigator.credentials.get({
        publicKey: options,
        // conditionalを指定で登録済みパスキーを表示（こっちだと動作しなかった）
        // mediation: conditional ? 'conditional' : 'optional' 
        mediation: 'required' // 明示的に使用するパスキーを指定
      });
      console.log("cred:", cred);

      const credential = {};
      credential.id = cred.id;
      credential.type = cred.type;
      // Base64URL encode `rawId`
      credential.rawId = base64url.encode(cred.rawId);

      // Base64URL encode some values
      const clientDataJSON = base64url.encode(cred.response.clientDataJSON);
      const authenticatorData = base64url.encode(cred.response.authenticatorData);
      const signature = base64url.encode(cred.response.signature);
      const userHandle = base64url.encode(cred.response.userHandle);

      credential.response = {
        clientDataJSON,
        authenticatorData,
        signature,
        userHandle,
      };

      // Send the result to the server and return the promise.
      const res = await _fetch(`/auth/signinResponse`, {
        credential: credential,
        idToken: idToken,
      });

      // Store random bytes
      randBytes = res.randBytes;
      console.log("randBytes:", randBytes);

      localStorage.setItem('secret', randBytes); // for evaluation, in production, use in-memory 
      return res.user;
    };

    async function handleRegister() {
      try {
        const idToken = getIdToken();

        // WebAuthnで登録
        const user = await registerCredential(idToken);
        if (user) {
          const content = document.getElementById('content');
          content.innerHTML = 'Sign up succeeded.';
        } else {
          const content = document.getElementById('content');
          content.innerHTML = 'Sign up failed.';
        }

      } catch (error) {
        console.error("Error:", error);
        const content = document.getElementById('content');
        content.innerHTML = 'Sign up failed.';
      }
    }

    async function handleLogin() {
      try {
        const idToken = getIdToken();

        // WebAuthnで認証
        const user = await authenticate(true, idToken);
        console.log(user);
        if (user) {
          const content = document.getElementById('content');
          content.innerHTML = 'Sign in succeeded.';
        } else {
          const content = document.getElementById('content');
          content.innerHTML = 'Sign in failed.';
        }

      } catch (error) {
        console.error("Error:", error);
        const content = document.getElementById('content');
        content.innerHTML = 'Sign in failed.';
      }
    }

    async function handleAfterLoginRequest() {
      try {
        const secret = localStorage.getItem('secret'); // for evaluation, in production, use in-memory
        if (!secret) {
          const content = document.getElementById('content');
          content.innerHTML = 'After sigin in request failed.';
          return;
        }

        // get nonce
        const nonceRes = await _fetch('/nonce');
        const nonce = nonceRes.nonce;

        console.log("secret:", secret);
        console.log("nonce:", nonce);

        // generate hash
        const hash = await digestMessage(secret+nonce);
        localStorage.setItem('hash', hash); // for evaluation, in production, use in-memory
        console.log("hash:", hash);
        const res = await _fetch('/after/signin', {hash: hash});

        if(res.verified) {
          const content = document.getElementById('content');
          content.innerHTML = 'After sigin in request succeeded.';
        } else {
          const content = document.getElementById('content');
          content.innerHTML = 'After sigin in request failed.';
        }

      } catch (error) {
        console.error("Error:", error);
        const content = document.getElementById('content');
        content.innerHTML = 'After sigin in request failed.';
      }
    }

    async function handleNormalRegister() {
      try {
        const idToken = getIdToken();
        const user = await _fetch('/auth/normal/signup', {idToken: idToken})

        if(user) {
          const content = document.getElementById('content');
          content.innerHTML = 'Sign up succeeded.';
        } else {
          const content = document.getElementById('content');
          content.innerHTML = 'Sign up failed.';
        }

      } catch (error) {
        console.error("Error:", error);
        const content = document.getElementById('content');
        content.innerHTML = 'Sign up failed.';
      }
    }

    async function handleNormalLogin() {
      try {
        const idToken = getIdToken();
        const user = await _fetch('/auth/normal/signin', {idToken: idToken})

        if(user) {
          const content = document.getElementById('content');
          content.innerHTML = 'Sign in succeeded.';
        } else {
          const content = document.getElementById('content');
          content.innerHTML = 'Sign in failed.';
        }

      } catch (error) {
        console.error("Error:", error);
        const content = document.getElementById('content');
        content.innerHTML = 'Sign in failed.';
      }
    }

    async function handleAfterNormalLoginRequest() {
      try {
        const res = await _fetch('/after/normal/signin');

        if(res.verified) {
          const content = document.getElementById('content');
          content.innerHTML = 'After sigin in request succeeded.';
        } else {
          const content = document.getElementById('content');
          content.innerHTML = 'After sigin in request failed.';
        }

      } catch (error) {
        console.error("Error:", error);
        const content = document.getElementById('content');
        content.innerHTML = 'After sigin in request failed.';
      }
    }

    document.addEventListener('DOMContentLoaded', async function () { 
      const idToken = getIdToken();
      // ID TokenをlocalStorageに保存
      window.localStorage.setItem('idToken', idToken);
    });

    document.getElementById('registerButton').addEventListener('click', handleRegister);
    document.getElementById('loginButton').addEventListener('click', handleLogin);
    document.getElementById('afterLoginRequestButton').addEventListener('click', handleAfterLoginRequest);
    document.getElementById('normalRegisterButton').addEventListener('click', handleNormalRegister);
    document.getElementById('normalLoginButton').addEventListener('click', handleNormalLogin);
    document.getElementById('normalAfterLoginRequestButton').addEventListener('click', handleAfterNormalLoginRequest);
  </script>
</body>
</html>